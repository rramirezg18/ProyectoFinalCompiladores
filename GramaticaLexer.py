# Generated from Gramatica.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,260,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
        12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,
        18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,5,
        26,179,8,26,10,26,12,26,182,9,26,1,27,4,27,185,8,27,11,27,12,27,
        186,1,27,1,27,4,27,191,8,27,11,27,12,27,192,3,27,195,8,27,1,28,1,
        28,5,28,199,8,28,10,28,12,28,202,9,28,1,28,1,28,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,3,29,215,8,29,1,30,1,30,1,31,1,31,1,
        32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,4,36,230,8,36,11,36,12,
        36,231,1,36,1,36,1,37,1,37,1,37,1,37,5,37,240,8,37,10,37,12,37,243,
        9,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,251,8,38,10,38,12,38,254,
        9,38,1,38,1,38,1,38,1,38,1,38,1,252,0,39,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,10,10,13,13,268,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,84,
        1,0,0,0,5,87,1,0,0,0,7,92,1,0,0,0,9,98,1,0,0,0,11,102,1,0,0,0,13,
        108,1,0,0,0,15,115,1,0,0,0,17,117,1,0,0,0,19,119,1,0,0,0,21,121,
        1,0,0,0,23,123,1,0,0,0,25,125,1,0,0,0,27,127,1,0,0,0,29,129,1,0,
        0,0,31,132,1,0,0,0,33,135,1,0,0,0,35,137,1,0,0,0,37,139,1,0,0,0,
        39,142,1,0,0,0,41,145,1,0,0,0,43,148,1,0,0,0,45,151,1,0,0,0,47,155,
        1,0,0,0,49,161,1,0,0,0,51,169,1,0,0,0,53,176,1,0,0,0,55,184,1,0,
        0,0,57,196,1,0,0,0,59,214,1,0,0,0,61,216,1,0,0,0,63,218,1,0,0,0,
        65,220,1,0,0,0,67,222,1,0,0,0,69,224,1,0,0,0,71,226,1,0,0,0,73,229,
        1,0,0,0,75,235,1,0,0,0,77,246,1,0,0,0,79,80,5,109,0,0,80,81,5,97,
        0,0,81,82,5,105,0,0,82,83,5,110,0,0,83,2,1,0,0,0,84,85,5,105,0,0,
        85,86,5,102,0,0,86,4,1,0,0,0,87,88,5,101,0,0,88,89,5,108,0,0,89,
        90,5,115,0,0,90,91,5,101,0,0,91,6,1,0,0,0,92,93,5,119,0,0,93,94,
        5,104,0,0,94,95,5,105,0,0,95,96,5,108,0,0,96,97,5,101,0,0,97,8,1,
        0,0,0,98,99,5,102,0,0,99,100,5,111,0,0,100,101,5,114,0,0,101,10,
        1,0,0,0,102,103,5,112,0,0,103,104,5,114,0,0,104,105,5,105,0,0,105,
        106,5,110,0,0,106,107,5,116,0,0,107,12,1,0,0,0,108,109,5,114,0,0,
        109,110,5,101,0,0,110,111,5,116,0,0,111,112,5,117,0,0,112,113,5,
        114,0,0,113,114,5,110,0,0,114,14,1,0,0,0,115,116,5,61,0,0,116,16,
        1,0,0,0,117,118,5,43,0,0,118,18,1,0,0,0,119,120,5,45,0,0,120,20,
        1,0,0,0,121,122,5,42,0,0,122,22,1,0,0,0,123,124,5,47,0,0,124,24,
        1,0,0,0,125,126,5,94,0,0,126,26,1,0,0,0,127,128,5,37,0,0,128,28,
        1,0,0,0,129,130,5,61,0,0,130,131,5,61,0,0,131,30,1,0,0,0,132,133,
        5,33,0,0,133,134,5,61,0,0,134,32,1,0,0,0,135,136,5,60,0,0,136,34,
        1,0,0,0,137,138,5,62,0,0,138,36,1,0,0,0,139,140,5,60,0,0,140,141,
        5,61,0,0,141,38,1,0,0,0,142,143,5,62,0,0,143,144,5,61,0,0,144,40,
        1,0,0,0,145,146,5,43,0,0,146,147,5,43,0,0,147,42,1,0,0,0,148,149,
        5,45,0,0,149,150,5,45,0,0,150,44,1,0,0,0,151,152,5,105,0,0,152,153,
        5,110,0,0,153,154,5,116,0,0,154,46,1,0,0,0,155,156,5,102,0,0,156,
        157,5,108,0,0,157,158,5,111,0,0,158,159,5,97,0,0,159,160,5,116,0,
        0,160,48,1,0,0,0,161,162,5,98,0,0,162,163,5,111,0,0,163,164,5,111,
        0,0,164,165,5,108,0,0,165,166,5,101,0,0,166,167,5,97,0,0,167,168,
        5,110,0,0,168,50,1,0,0,0,169,170,5,115,0,0,170,171,5,116,0,0,171,
        172,5,114,0,0,172,173,5,105,0,0,173,174,5,110,0,0,174,175,5,103,
        0,0,175,52,1,0,0,0,176,180,7,0,0,0,177,179,7,1,0,0,178,177,1,0,0,
        0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,54,1,0,0,0,
        182,180,1,0,0,0,183,185,7,2,0,0,184,183,1,0,0,0,185,186,1,0,0,0,
        186,184,1,0,0,0,186,187,1,0,0,0,187,194,1,0,0,0,188,190,5,46,0,0,
        189,191,7,2,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,
        192,193,1,0,0,0,193,195,1,0,0,0,194,188,1,0,0,0,194,195,1,0,0,0,
        195,56,1,0,0,0,196,200,5,34,0,0,197,199,8,3,0,0,198,197,1,0,0,0,
        199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,
        202,200,1,0,0,0,203,204,5,34,0,0,204,58,1,0,0,0,205,206,5,116,0,
        0,206,207,5,114,0,0,207,208,5,117,0,0,208,215,5,101,0,0,209,210,
        5,102,0,0,210,211,5,97,0,0,211,212,5,108,0,0,212,213,5,115,0,0,213,
        215,5,101,0,0,214,205,1,0,0,0,214,209,1,0,0,0,215,60,1,0,0,0,216,
        217,5,40,0,0,217,62,1,0,0,0,218,219,5,41,0,0,219,64,1,0,0,0,220,
        221,5,123,0,0,221,66,1,0,0,0,222,223,5,125,0,0,223,68,1,0,0,0,224,
        225,5,59,0,0,225,70,1,0,0,0,226,227,5,44,0,0,227,72,1,0,0,0,228,
        230,7,4,0,0,229,228,1,0,0,0,230,231,1,0,0,0,231,229,1,0,0,0,231,
        232,1,0,0,0,232,233,1,0,0,0,233,234,6,36,0,0,234,74,1,0,0,0,235,
        236,5,47,0,0,236,237,5,47,0,0,237,241,1,0,0,0,238,240,8,5,0,0,239,
        238,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,
        244,1,0,0,0,243,241,1,0,0,0,244,245,6,37,0,0,245,76,1,0,0,0,246,
        247,5,47,0,0,247,248,5,42,0,0,248,252,1,0,0,0,249,251,9,0,0,0,250,
        249,1,0,0,0,251,254,1,0,0,0,252,253,1,0,0,0,252,250,1,0,0,0,253,
        255,1,0,0,0,254,252,1,0,0,0,255,256,5,42,0,0,256,257,5,47,0,0,257,
        258,1,0,0,0,258,259,6,38,0,0,259,78,1,0,0,0,10,0,180,186,192,194,
        200,214,231,241,252,1,6,0,0
    ]

class GramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MAIN = 1
    IF = 2
    ELSE = 3
    WHILE = 4
    FOR = 5
    PRINT = 6
    RETURN = 7
    ASIGNACION = 8
    MAS = 9
    MENOS = 10
    MULTIPLICACION = 11
    DIVISION = 12
    POTENCIA = 13
    MOD = 14
    IGUAL = 15
    DIFERENTE = 16
    MENOR = 17
    MAYOR = 18
    MENOR_IGUAL_QUE = 19
    MAYOR_IGUAL_QUE = 20
    MASMAS = 21
    MENOSMENOS = 22
    INT = 23
    FLOAT = 24
    BOOLEAN = 25
    STRING = 26
    VARIABLE = 27
    NUMERO = 28
    CADENA = 29
    BOOLEANO = 30
    PARENTESIS_APERTURA = 31
    PARENTESIS_CIERRE = 32
    LLAVE_APERTURA = 33
    LLAVE_CIERRE = 34
    FIN_DE_LINEA = 35
    COMA = 36
    WS = 37
    COMENTARIO_LINEA = 38
    COMENTARIO_MULTILINEA = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "'if'", "'else'", "'while'", "'for'", "'print'", "'return'", 
            "'='", "'+'", "'-'", "'*'", "'/'", "'^'", "'%'", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'++'", "'--'", "'int'", "'float'", 
            "'boolean'", "'string'", "'('", "')'", "'{'", "'}'", "';'", 
            "','" ]

    symbolicNames = [ "<INVALID>",
            "MAIN", "IF", "ELSE", "WHILE", "FOR", "PRINT", "RETURN", "ASIGNACION", 
            "MAS", "MENOS", "MULTIPLICACION", "DIVISION", "POTENCIA", "MOD", 
            "IGUAL", "DIFERENTE", "MENOR", "MAYOR", "MENOR_IGUAL_QUE", "MAYOR_IGUAL_QUE", 
            "MASMAS", "MENOSMENOS", "INT", "FLOAT", "BOOLEAN", "STRING", 
            "VARIABLE", "NUMERO", "CADENA", "BOOLEANO", "PARENTESIS_APERTURA", 
            "PARENTESIS_CIERRE", "LLAVE_APERTURA", "LLAVE_CIERRE", "FIN_DE_LINEA", 
            "COMA", "WS", "COMENTARIO_LINEA", "COMENTARIO_MULTILINEA" ]

    ruleNames = [ "MAIN", "IF", "ELSE", "WHILE", "FOR", "PRINT", "RETURN", 
                  "ASIGNACION", "MAS", "MENOS", "MULTIPLICACION", "DIVISION", 
                  "POTENCIA", "MOD", "IGUAL", "DIFERENTE", "MENOR", "MAYOR", 
                  "MENOR_IGUAL_QUE", "MAYOR_IGUAL_QUE", "MASMAS", "MENOSMENOS", 
                  "INT", "FLOAT", "BOOLEAN", "STRING", "VARIABLE", "NUMERO", 
                  "CADENA", "BOOLEANO", "PARENTESIS_APERTURA", "PARENTESIS_CIERRE", 
                  "LLAVE_APERTURA", "LLAVE_CIERRE", "FIN_DE_LINEA", "COMA", 
                  "WS", "COMENTARIO_LINEA", "COMENTARIO_MULTILINEA" ]

    grammarFileName = "Gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


